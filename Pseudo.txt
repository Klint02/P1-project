Dijkstra

function main ()
    array graph[][] = matrix

    call function findShortestPath(graph)


function findShortestPath(graph)
    array visited[] = ALL FALSE
    array shortestDistance[]

    loop (length of shortestDistance)
        shortestDistance[i] = infinite

    var nodeParent[] = all 0
    var trashCompactness[] = number of nodes assigned a random value from 0 to 100
    var finalRoute[] = all 0

    shortestDistance[0] = 0
    trashCompactness[0] = 0

    var currentNode = 0

    loop (amount of nodes)
        currentNode = findShortestUnvisited

        visited[currentNode] = TRUE
        trashCompactness[currentNode] = 0

        call function findLenghtsFromNode

    call function printResult

    call function trashRoutePlanner

    print final route

function findLenghtsFromNode(currentnode, shortestDistance, nodeParent, trashCompactness, finalRoute, currentNode, routeNum)
 
    loop(amount of nodes)
        if graph[currentNode][i] not equal to 0 and shortestDistance[currentNode] plus graph[currentNode][i] less than shortestDistance[i]
        